---
description: Page structure
globs: 
alwaysApply: false
---
# Page Structure

- Create new pages at: `apps/web/app/(app)/PAGE_NAME/page.tsx`
- Components for the page are either put in `page.tsx`, or in the `apps/web/app/(app)/PAGE_NAME` folder
- Pages are Server components so you can load data into them directly
- If we're in a deeply nested component we will use `swr` to fetch via API
- If you need to use `onClick` in a component, that component is a client component and file must start with `"use client"` directive at the top

## TypeScript and ESLint Guidelines
- Remove unused imports and variables from your files
- Prefix intentionally unused variables with underscore (e.g., `_variableName`, `_e` for unused event parameters)
- Don't declare variables that won't be used later in the code
- Avoid using `any` type - specify proper types instead (use `unknown` if type is uncertain)
- Use proper event types like `React.MouseEvent<HTMLButtonElement>` for event handlers
- Escape special characters in JSX: use `&apos;` for single quotes and `&quot;` for double quotes
- Make sure all functions have parameter and return types defined
- Server Components should not include client-side interactivity
- Client Components must have `"use client"` at the top of the file

### Avoiding Unused Variables
- Always prefix unused parameters with underscore (e.g., `_request`, `_context`)
- For API route handlers, always use the prefix format:
export async function GET(_request: Request) {
// Implementation that doesn't use request
}

- For try/catch blocks where error isn't used:
try {
// Code that might throw
} catch (_error) {
// Error handling without using error object
}

### API Route Patterns
- Only include parameters your code will actually use
- Use typed request parameters: `(_request: NextRequest)` rather than `any`
- For required parameters your code doesn't use directly, always prefix with underscore:
// CORRECT - Parameter is prefixed with underscore when unused
export async function GET(_request: NextRequest) {
return NextResponse.json({ data: "example" });
}

// INCORRECT - Will cause ESLint errors
export async function GET(request: NextRequest) {
return NextResponse.json({ data: "example" });
}

### Error Handling Best Practices
- Only catch errors you plan to handle
- Always use the error object in catch blocks, or prefix with underscore:
// CORRECT - Using error variable
try {
const result = await someOperation();
} catch (error) {
console.error("Operation failed:", error.message);
}

// CORRECT - Prefix unused error with underscore
try {
await someOperation();
} catch (_error) {
// Generic error handling without using error details
return { success: false };
}

### Variable Declaration
- Declare variables only when you will actually use them
- Never declare "placeholder" variables for future use
- Consider using TypeScript's optional chaining (`?.`) and nullish coalescing (`??`) operators instead of temporary variables